Module -- 1 STORING FILES
Theory: - 
	Storing files model is the first part of both sequencial as well as the parallel sequencial model. Baiscally what all this model does is that,
	it first find out the directory path where all the searchable files lay. Then it one by one pick up all the files and take their content to the 
	TressMap data structure and also it do it the same for the search file where all the searchable words are present. By this means, it speeds up
	the searching logic and the controller never have to go back to the secondary memory again and again for every search.

Algorithm:- 
	1. Initializing the variable FOLDER_PATH store directory path.
	2. Paths.get(FOLDER_PATH) : loads up the path of directory.
	3. Initializing a TreeMap named "linesOfFiles" to store filename and its content.
	4. Initializing a TreeMap named "freqOfWords" to store searched word co-oresponding to 		   files.
	5. Initializing a Dictionary named "word" to store frequency of each words to be searched.
	6. Initializing an ArrayList named "fileNames" to store names of files in directory.
	7. For each directoryStream in Files.newDirectoryStream(Paths.get(FOLDER_PATH))
		A. Add files path into "fileNames" as its name.
		(end of for loop)
	8. For file in "fileNames"
		A. Initializing the String List named "lines".
		B. lines = Files.readAllLines(folderPath.resolve(file))
		(end of for loop)
	9. Initializing an ArrayList of String type named "st" to store searching words.
	10.Initializing a FileReader for "SEARCH_FILE_PATH".
	11.For each line of aboved file
		A. Putting word in "st" ArrayList
		(end of loop)
	
Module -- 2 Q Algo & SymbolRemover
Theory: -
	Symbol Remover and Queing algorithm comes second in sequencial model, right after the storing files. It's work is also very straight
	forward just to reduce down the time taken for searching out the result, what all this model does is that, it removes off all the 
	comman grammatical words like are, is, the and so on, along with all the punctuations which would make our task more difficult to
	find out our desired word. It also eleminates out the enters i.e new line characters and replaces them by a space.

Algorithm: -
	1. For each file in "linesOfFiles".
		A. Initializing a dictionary "word" to store searched words along its frequency.
		B. For each word 'temp' in "st"
			i. Initializing d = temp as LowerCase.
			ii. Initializing counter i to 0.
			iii. For line as 'line' in "lines".
				a. line = " " + line (Add space in beginning of each line).
				b. line = line as LowerCase.
				c. For each character c in 'line'.
					I. If c is other than alphabet or number,replace it with " "(space)
					(end of for loop)
			 	d. For each line containing d.
					I. Increase counter i by 1.
					(end of for loop)
				(end of loop)
			iv. Put searched word "d" along its frequency "i" to "word".
			(end of loop)
		C. Put file name "fileName" along resulted dictionary "word" to "freqOfWords".
		(end of loop)

Module -- 3 Creation of Indexes and Posting lists (String w)
Theory: -
	Creation of Indexes means finding out the result through out the directory along with their frequencies. And posting list 
	is the storing of each result as a recorded list with each file along with filename. Basically, what all is taking place here
	in this model is, it first retrieve throw content of all the files and read the content word by word and matches them out
	with the required word if it is matched up, frequency variable has been upgraded and this process continues till every file 
	is being retrieved out from TreeMap, then stores up the result in the form of dictionary attached with the respective file name as tag.
	
Algorithm: -
	1. Initializing an Integer array of size to that of Dictionary "word".
	2. Fill the array with 0.
	3. Initialize counter i to 0.
	4. For each word "t" in "st".
		A. Initialize d to t as LowerCase.
		B. For each file "fileNames" in "linesOfFiles".
			i. Initialize counter c to 0.
			ii. For each line 'line' in "fileNames" 
				a. Add " "(space) on before and after the line.
				b. Convert line to LowerCase.
				c. For each 'line' contains "d"
					I. Increase counter c by 1.
					(end of loop)
				(end of loop)
			iii. If counter is greater than 0.
				a. Increase value of countNode at index i by 1.
			(end of loop)
		C. Increase counter i by 1.
		(end of loop)
	
					
	

