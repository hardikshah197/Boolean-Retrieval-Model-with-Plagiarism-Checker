		Parallel Sequencial Execution of BRM

Theory:-
	This Parallel Sequencial Model for searching of Boolean Retrieval Model is basically works on the basic principles of 
	Multi-threading. Here we, let's suppose have to search out any two literals, so what we do is, we create a new thread for 
	each search. So, for two search there are two threads for this. And these two threads will work out like they both start
	at same time let us suppose t1, and ends up approximately together, depending upon their search through directory.
	In this way, rather searching them one by one, we found the result for both only at the cost of one's executional time.


Algorithm:- 
	
	A1. Creating two Threads for executing two word's searching parallely.
		FileNames: List of File Names
		folderPath : Path of directory
		LinesofFiles: Tree map storing file names corresponding to its content. 
		freqofWords: Tree map storing words corresponding to frequency .
		searchWords: a string List that stores words to be searched in the directory.
		wordDictionary: Dictionary that store word as a key and its frequency as a value.
		counternode : an integer array that stores number of files containing this word.

	    1. Retrieve all files names from folderPath to FileNames.
	    2. Put the contents of each file having their names in FileNames into linesofFiles.
	    3. Read the file containing words to be searched and store content in searchWords.
	    4. For each entity in linesofPath  (filename,  lines )
		    a. For  each item in searchWords (search word)
			    i. Convert this word into lower case.
			    ii. Initialize a counter to 0.
			    iii. For each line in lines
				    A. Convert this line into lower case
				    B. For each character of this line:
				    	  I. Check if character is other than alphabet or a number, replace it with space (‘ ‘). 
			    	    C. For this line check if this search word is present, increase the counter by 1
			    iv. Put word along with its counter into wordDictonary.
		    b. Put filename and wordDictionary into freqofWords.
	    5. Set  i=0
	    6. For each word in searchWord.
		    a. Convert word into lower case.
		    b. For each lines of LinesOfFiles(filename, lines).
			    i. Initialize counter to 0.
			    ii. For each line in lines
				    A. Convert line into lower Case
				    B. For this line check if this search word is present in lines
					    I. Increase the counter by 1.
					    II. Terminating the current loop
				    C. If Counter is greater than 0
				    	    I. Increase counterNode by one.
				    D. Generate the results of each word stored in searchWord along with its counterNode value.
				    E. Increase the counter I by 1.
